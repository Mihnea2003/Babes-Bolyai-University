     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  ; the start label will be the entry point in the program
     3                                  global  start 
     4                                  
     5                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     6                                  
     7                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  segment  data use32 class=data ; the data segment where the variables are declared 
    10 00000000 0F                          a  db 15
    11 00000001 05                      	b  db 5
    12 00000002 61                          c  db 97
    13 00000003 05                          d  db 5
    14 00000004 7800                        e  dw 120
    15 00000006 7800                        f  dw 120
    16 00000008 6400                        g  dw 100
    17 0000000A 0F00                        h  dw 15
    18                                  segment  code use32 class=code ; code segment
    19                                  start: 
    20                                      ;(f*g-a*b*e)/(h+c*d)  a,b,c,d-byte, e,f,g,h-word (120*100-15*5*120)/(15+97*5)=(12000-9000)/(500)=3000/500=6
    21                                  
    22 00000000 66A1[06000000]              mov AX, [f]
    23 00000006 66F725[08000000]            mul word [g]    ;->DX:AX=f*g=120*100=12000
    24                                      
    25 0000000D 6652                        push DX
    26 0000000F 6650                        push AX
    27 00000011 5B                          pop EBX         ;EBX->DX:AX=12000
    28                                      
    29                                      
    30 00000012 A0[00000000]                mov AL, [a]
    31 00000017 F625[01000000]              mul byte [b]    ;AX=a*b=15*5=75
    32                                      
    33 0000001D 66F725[04000000]            mul word [e]    ;->DX:AX ->a*b*e=15*5*120=9000
    34                                      
    35 00000024 6652                        push DX
    36 00000026 6650                        push AX
    37 00000028 58                          pop EAX         ;-> EAX=DX:AX=9000
    38                                      
    39 00000029 29C3                        sub EBX,EAX     ;->EBX=(f*g-a*b*e)=(120*100-15*5*120)=3000
    40                                      
    41 0000002B A0[02000000]                mov AL, [c]
    42 00000030 F625[03000000]              mul byte [d]    ;AX=c*d
    43 00000036 660305[0A000000]            add AX, [h]     ;AX->(h+c*d)=(15+97*5)=500
    44 0000003D 6689C1                      mov CX,AX       ;CX->AX
    45                                      
    46 00000040 53                          push EBX
    47 00000041 6658                        pop AX
    48 00000043 665A                        pop DX    ;so we can divide (h+c*d)  ->DX:AX=(f*g-a*b*e)
    49 00000045 66F7F1                      div CX    ; EAX=(f*g-a*b*e)/(h+c*d)=6
    50                                      
    51                                      
    52 00000048 FF15[00000000]              call[exit]
    53                                      
    54                                      
    55                                      
