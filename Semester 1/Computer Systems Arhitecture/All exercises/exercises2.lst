     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  ; the start label will be the entry point in the program
     3                                  global  start 
     4                                  
     5                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     6                                  
     7                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  segment  data use32 class=data ; the data segment where the variables are declared 
    10                                      ;unsigned
    11 00000000 010203040506070809-         s1 db 1,2,3,4,5,6,7,8,9,10
    11 00000009 0A                 
    12                                      lens1 equ $-s1   ;the length of s1
    13 0000000A 02                          two db 2
    14 0000000B 0000<rept>                  s2 times lens1 dw 0 ;add digit 7 to each element of s1 17,27,37...
    15 0000001F 00                          sum db 0
    16 00000020 0A                          ten db 10
    17                                  segment  code use32 class=code ; code segment
    18                                      start:
    19                                      
    20                                      ;construct s2 by adding digit 7 at the end of elements from s1
    21                                      
    22 00000000 B90A000000                  mov ecx, lens1
    23 00000005 BE00000000                  mov esi, 0   ;index for s1
    24 0000000A BF00000000                  mov edi, 0   ;index for s2
    25 0000000F E31F                        jecxz end_loop
    26                                      add_7:
    27 00000011 8A86[00000000]                  mov al, [s1+esi]
    28 00000017 F625[20000000]                  mul byte[ten]   ;ax=al*10
    29 0000001D 6683C007                        add AX, 7   ;ax=al*10+7
    30 00000021 6698                            cbw   ;al->ax signed
    31 00000023 668987[0B000000]                mov [s2+edi], ax
    32 0000002A 46                              inc esi
    33 0000002B 83C702                          add edi, 2 ;because it is an array of words
    34 0000002E E2E1                        loop add_7
    35                                      end_loop:
    36                                      
    37                                      
    38                                      ;sum of even elements(bytes) in s1
    39 00000030 B300                        mov bl, 0 ;compute the sum of even here
    40 00000032 B700                        mov bh, 0  ;sum of odd
    41 00000034 B90A000000                  mov ecx, lens1
    42 00000039 BE00000000                  mov esi, 0
    43 0000003E E324                        jecxz skip_loop
    44                                      sum_loop:
    45 00000040 8A86[00000000]                  mov AL, [s1+esi]  ;s1[esi]
    46 00000046 B400                            mov ah, 0  ;al->ax 
    47 00000048 F635[0A000000]                  div byte [two]  ;al=ax/2  ah=ax%2
    48 0000004E 80FC00                          cmp ah, 0
    49 00000051 7508                            jne donotadd
    50 00000053 029E[00000000]                      add bl, [s1+esi] 
    51 00000059 EB06                                jmp over_odd
    52                                          donotadd:
    53 0000005B 02BE[00000000]                      add bh, [s1+esi]
    54                                          over_odd
    54          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    55 00000061 46                              inc esi 
    56 00000062 E2DC                        loop sum_loop
    57                                      skip_loop:
    58                                      
    59 00000064 881D[1F000000]              mov [sum], bl
    60 0000006A FF15[00000000]              call [exit]
