     1                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     2                                  ; a - byte, b - word
     3                                  ; (b / a * 2 + 10) * b - b * 15;
     4                                  ; ex. 1: a = 10; b = 40; Result: (40 / 10 * 2 + 10) * 40 - 40 * 15 = 18 * 40 - 1600 = 720 - 600 = 120
     5                                  ; ex. 2: a = 100; b = 50; Result: (50 / 100 * 2 + 10) * 50 - 50 * 15 = 12 * 50 - 750 = 600 - 750 = - 150
     6                                  bits 32 ;assembling for the 32 bits architecture
     7                                  ; the start label will be the entry point in the program
     8                                  global  start 
     9                                  
    10                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    11                                  
    12                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    13                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    14                                  segment  data use32 class=data ; the data segment where the variables are declared 
    15 00000000 0A                      	a  db 10
    16 00000001 2800                    	b  dw 40
    17                                  segment  code use32 class=code ; code segment
    18                                  start: 
    19                                      ;(b/a*2+10)*b-b*15;
    20                                      ;b/a 
    21 00000000 66A1[01000000]              mov AX, [b]
    22 00000006 F635[00000000]              div byte [a] ; AX/a->AL  AX%a->AH  ; AL=b/a 
    23 0000000C B702                        mov BH, 2
    24 0000000E F6E7                        mul BH ;AL*BH->AX=b/a*2 
    25                                      
    26 00000010 6683C00A                    add AX,10 ; AX=b/a*2+10
    27                                      
    28 00000014 66F725[01000000]            mul word[b] ;AX*b= ()*b->DX:AX =  ->EBX
    29 0000001B 6652                        push DX
    30 0000001D 6650                        push AX 
    31 0000001F 5B                          pop EBX ; EBX=(b/a*2+10)*b
    32                                      
    33                                      ;b*15 = word*word AX 
    34 00000020 66B80F00                    mov AX, 15
    35 00000024 66F725[01000000]            mul word [b] ;AX*b->DX:AX =b*15 
    36 0000002B 6652                        push DX
    37 0000002D 6650                        push AX 
    38 0000002F 58                          pop EAX ; EAX=b*15 
    39                                      
    40 00000030 29C3                        sub EBX, EAX ;EBX = (b/a*2+10)*b-b*15;
    41                                      
    42 00000032 FF15[00000000]              call [exit]
    43                                      
    44                                      
